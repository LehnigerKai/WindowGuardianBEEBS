set(BENCHMARK $ENV{BENCHMARK})
if(BENCHMARK STREQUAL "aha-compress")
	idf_component_register(SRCS aha-compress/compress_test.c main.c INCLUDE_DIRS aha-compress .)
elseif(BENCHMARK STREQUAL "aha-mont64")
	idf_component_register(SRCS aha-mont64/mont64.c main.c INCLUDE_DIRS aha-mont64 .)
elseif(BENCHMARK STREQUAL "bs")
	idf_component_register(SRCS bs/libbs.c main.c INCLUDE_DIRS bs .)
elseif(BENCHMARK STREQUAL "bubblesort")
	idf_component_register(SRCS bubblesort/libbubblesort.c main.c INCLUDE_DIRS bubblesort .)
elseif(BENCHMARK STREQUAL "cnt")
	idf_component_register(SRCS cnt/cnt.c main.c INCLUDE_DIRS cnt .)
elseif(BENCHMARK STREQUAL "compress")
	idf_component_register(SRCS compress/libcompress.c main.c INCLUDE_DIRS compress .)
elseif(BENCHMARK STREQUAL "cover")
	idf_component_register(SRCS cover/libcover.c main.c INCLUDE_DIRS cover .)
elseif(BENCHMARK STREQUAL "crc")
	idf_component_register(SRCS crc/libcrc.c main.c INCLUDE_DIRS crc .)
elseif(BENCHMARK STREQUAL "crc32")
	idf_component_register(SRCS crc32/crc_32.c main.c INCLUDE_DIRS crc32 .)
elseif(BENCHMARK STREQUAL "ctl")
	idf_component_register(SRCS ctl/ctl.c main.c INCLUDE_DIRS ctl .)
elseif(BENCHMARK STREQUAL "ctl-stack")
	idf_component_register(SRCS ctl-stack/ctl.c main.c INCLUDE_DIRS ctl-stack .)
elseif(BENCHMARK STREQUAL "ctl-string")
	idf_component_register(SRCS ctl-string/string.c main.c INCLUDE_DIRS ctl-string .)
elseif(BENCHMARK STREQUAL "ctl-vector")
	idf_component_register(SRCS ctl-vector/ctl.c main.c INCLUDE_DIRS ctl-vector .)
elseif(BENCHMARK STREQUAL "cubic")
	idf_component_register(SRCS cubic/basicmath_small.c cubic/libcubic.c main.c INCLUDE_DIRS cubic .)
elseif(BENCHMARK STREQUAL "dijkstra")
	idf_component_register(SRCS dijkstra/dijkstra_small.c main.c INCLUDE_DIRS dijkstra .)
elseif(BENCHMARK STREQUAL "dtoa")
	idf_component_register(SRCS dtoa/libdtoa.c main.c INCLUDE_DIRS dtoa .)
elseif(BENCHMARK STREQUAL "duff")
	idf_component_register(SRCS duff/libduff.c main.c INCLUDE_DIRS duff .)
elseif(BENCHMARK STREQUAL "edn")
	idf_component_register(SRCS edn/libedn.c main.c INCLUDE_DIRS edn .)
elseif(BENCHMARK STREQUAL "expint")
	idf_component_register(SRCS expint/libexpint.c main.c INCLUDE_DIRS expint .)
elseif(BENCHMARK STREQUAL "fac")
	idf_component_register(SRCS fac/libfac.c main.c INCLUDE_DIRS fac .)
elseif(BENCHMARK STREQUAL "fasta")
	idf_component_register(SRCS fasta/libfasta.c main.c INCLUDE_DIRS fasta .)
elseif(BENCHMARK STREQUAL "fdct")
	idf_component_register(SRCS fdct/libfdct.c main.c INCLUDE_DIRS fdct .)
elseif(BENCHMARK STREQUAL "fibcall")
	idf_component_register(SRCS fibcall/libfibcall.c main.c INCLUDE_DIRS fibcall .)
elseif(BENCHMARK STREQUAL "fir")
	idf_component_register(SRCS fir/libfir.c main.c INCLUDE_DIRS fir .)
elseif(BENCHMARK STREQUAL "frac")
	idf_component_register(SRCS frac/libfrac.c main.c INCLUDE_DIRS frac .)
elseif(BENCHMARK STREQUAL "huffbench")
	idf_component_register(SRCS huffbench/libhuffbench.c main.c INCLUDE_DIRS huffbench .)
elseif(BENCHMARK STREQUAL "insertsort")
	idf_component_register(SRCS insertsort/libinsertsort.c main.c INCLUDE_DIRS insertsort .)
elseif(BENCHMARK STREQUAL "janne_complex")
	idf_component_register(SRCS janne_complex/libjanne_complex.c main.c INCLUDE_DIRS janne_complex .)
elseif(BENCHMARK STREQUAL "jfdctint")
	idf_component_register(SRCS jfdctint/libjfdctint.c main.c INCLUDE_DIRS jfdctint .)
elseif(BENCHMARK STREQUAL "lcdnum")
	idf_component_register(SRCS lcdnum/liblcdnum.c main.c INCLUDE_DIRS lcdnum .)
elseif(BENCHMARK STREQUAL "levenshtein")
	idf_component_register(SRCS levenshtein/liblevenshtein.c main.c INCLUDE_DIRS levenshtein .)
elseif(BENCHMARK STREQUAL "ludcmp")
	idf_component_register(SRCS ludcmp/libludcmp.c main.c INCLUDE_DIRS ludcmp .)
elseif(BENCHMARK STREQUAL "matmult")
	idf_component_register(SRCS matmult/matmult.c main.c INCLUDE_DIRS matmult .)
elseif(BENCHMARK STREQUAL "matmult-float")
	idf_component_register(SRCS matmult-float/matmult.c main.c INCLUDE_DIRS matmult-float .)
elseif(BENCHMARK STREQUAL "matmult-int")
	idf_component_register(SRCS matmult-int/matmult.c main.c INCLUDE_DIRS matmult-int .)
elseif(BENCHMARK STREQUAL "mergesort")
	idf_component_register(SRCS mergesort/libmergesort.c main.c INCLUDE_DIRS mergesort .)
elseif(BENCHMARK STREQUAL "miniz")
	idf_component_register(SRCS miniz/miniz.c miniz/miniz_b.c main.c INCLUDE_DIRS miniz .)
elseif(BENCHMARK STREQUAL "minver")
	idf_component_register(SRCS minver/libminver.c main.c INCLUDE_DIRS minver .)
elseif(BENCHMARK STREQUAL "nbody")
	idf_component_register(SRCS nbody/nbody.c main.c INCLUDE_DIRS nbody .)
elseif(BENCHMARK STREQUAL "ndes")
	idf_component_register(SRCS ndes/libndes.c main.c INCLUDE_DIRS ndes .)
elseif(BENCHMARK STREQUAL "nettle-aes")
	idf_component_register(SRCS nettle-aes/nettle-aes.c main.c INCLUDE_DIRS nettle-aes .)
elseif(BENCHMARK STREQUAL "nettle-arcfour")
	idf_component_register(SRCS nettle-arcfour/arcfour.c main.c INCLUDE_DIRS nettle-arcfour .)
elseif(BENCHMARK STREQUAL "nettle-cast128")
	idf_component_register(SRCS nettle-cast128/cast128.c main.c INCLUDE_DIRS nettle-cast128 .)
elseif(BENCHMARK STREQUAL "nettle-des")
	idf_component_register(SRCS nettle-des/des.c main.c INCLUDE_DIRS nettle-des .)
elseif(BENCHMARK STREQUAL "nettle-md5")
	idf_component_register(SRCS nettle-md5/md5.c main.c INCLUDE_DIRS nettle-md5 .)
elseif(BENCHMARK STREQUAL "nettle-sha256")
	idf_component_register(SRCS nettle-sha256/nettle-sha256.c main.c INCLUDE_DIRS nettle-sha256 .)
elseif(BENCHMARK STREQUAL "newlib-exp")
	idf_component_register(SRCS newlib-exp/ef_exp.c main.c INCLUDE_DIRS newlib-exp .)
elseif(BENCHMARK STREQUAL "newlib-log")
	idf_component_register(SRCS newlib-log/ef_log.c main.c INCLUDE_DIRS newlib-log .)
elseif(BENCHMARK STREQUAL "newlib-mod")
	idf_component_register(SRCS newlib-mod/ef_mod.c main.c INCLUDE_DIRS newlib-mod .)
elseif(BENCHMARK STREQUAL "newlib-sqrt")
	idf_component_register(SRCS newlib-sqrt/ef_sqrt.c main.c INCLUDE_DIRS newlib-sqrt .)
elseif(BENCHMARK STREQUAL "ns")
	idf_component_register(SRCS ns/libns.c main.c INCLUDE_DIRS ns .)
elseif(BENCHMARK STREQUAL "nsichneu")
	idf_component_register(SRCS nsichneu/libnsichneu.c main.c INCLUDE_DIRS nsichneu .)
elseif(BENCHMARK STREQUAL "picojpeg")
	idf_component_register(SRCS picojpeg/libpicojpeg.c picojpeg/picojpeg_test.c main.c INCLUDE_DIRS picojpeg .)
elseif(BENCHMARK STREQUAL "prime")
	idf_component_register(SRCS prime/libprime.c main.c INCLUDE_DIRS prime .)
elseif(BENCHMARK STREQUAL "qrduino")
	idf_component_register(SRCS qrduino/qrencode.c qrduino/qrframe.c qrduino/qrtest.c main.c INCLUDE_DIRS qrduino .)
elseif(BENCHMARK STREQUAL "qsort")
	idf_component_register(SRCS qsort/libqsort.c main.c INCLUDE_DIRS qsort .)
elseif(BENCHMARK STREQUAL "qurt")
	idf_component_register(SRCS qurt/libqurt.c main.c INCLUDE_DIRS qurt .)
elseif(BENCHMARK STREQUAL "recursion")
	idf_component_register(SRCS recursion/librecursion.c main.c INCLUDE_DIRS recursion .)
elseif(BENCHMARK STREQUAL "rijndael")
	idf_component_register(SRCS rijndael/aes.c rijndael/aesxam.c main.c INCLUDE_DIRS rijndael .)
elseif(BENCHMARK STREQUAL "select")
	idf_component_register(SRCS select/libselect.c main.c INCLUDE_DIRS select .)
elseif(BENCHMARK STREQUAL "sglib-arraybinsearch")
	idf_component_register(SRCS sglib-arraybinsearch/arraybinsearch.c main.c INCLUDE_DIRS sglib-arraybinsearch .)
elseif(BENCHMARK STREQUAL "sglib-arrayheapsort")
	idf_component_register(SRCS sglib-arrayheapsort/arraysort.c main.c INCLUDE_DIRS sglib-arrayheapsort .)
elseif(BENCHMARK STREQUAL "sglib-arrayquicksort")
	idf_component_register(SRCS sglib-arrayquicksort/arraysort.c main.c INCLUDE_DIRS sglib-arrayquicksort .)
elseif(BENCHMARK STREQUAL "sglib-arraysort")
	idf_component_register(SRCS sglib-arraysort/arraysort.c main.c INCLUDE_DIRS sglib-arraysort .)
elseif(BENCHMARK STREQUAL "sglib-dllist")
	idf_component_register(SRCS sglib-dllist/dllist.c main.c INCLUDE_DIRS sglib-dllist .)
elseif(BENCHMARK STREQUAL "sglib-hashtable")
	idf_component_register(SRCS sglib-hashtable/hashtable.c main.c INCLUDE_DIRS sglib-hashtable .)
elseif(BENCHMARK STREQUAL "sglib-listinsertsort")
	idf_component_register(SRCS sglib-listinsertsort/listinsertsort.c main.c INCLUDE_DIRS sglib-listinsertsort .)
elseif(BENCHMARK STREQUAL "sglib-listsort")
	idf_component_register(SRCS sglib-listsort/listsort.c main.c INCLUDE_DIRS sglib-listsort .)
elseif(BENCHMARK STREQUAL "sglib-queue")
	idf_component_register(SRCS sglib-queue/queue.c main.c INCLUDE_DIRS sglib-queue .)
elseif(BENCHMARK STREQUAL "sglib-rbtree")
	idf_component_register(SRCS sglib-rbtree/rbtree.c main.c INCLUDE_DIRS sglib-rbtree .)
elseif(BENCHMARK STREQUAL "slre")
	idf_component_register(SRCS slre/libslre.c main.c INCLUDE_DIRS slre .)
elseif(BENCHMARK STREQUAL "sqrt")
	idf_component_register(SRCS sqrt/libsqrt.c main.c INCLUDE_DIRS sqrt .)
elseif(BENCHMARK STREQUAL "st")
	idf_component_register(SRCS st/libst.c main.c INCLUDE_DIRS st .)
elseif(BENCHMARK STREQUAL "statemate")
	idf_component_register(SRCS statemate/libstatemate.c main.c INCLUDE_DIRS statemate .)
elseif(BENCHMARK STREQUAL "stb_perlin")
	idf_component_register(SRCS stb_perlin/libstb_perlin.c main.c INCLUDE_DIRS stb_perlin .)
elseif(BENCHMARK STREQUAL "stringsearch1")
	idf_component_register(SRCS stringsearch1/fast.fwd.inc.c stringsearch1/fast.rev.d12.c stringsearch1/stringsearch1.c main.c INCLUDE_DIRS stringsearch1 .)
elseif(BENCHMARK STREQUAL "strstr")
	idf_component_register(SRCS strstr/libstrstr.c main.c INCLUDE_DIRS strstr .)
elseif(BENCHMARK STREQUAL "tarai")
	idf_component_register(SRCS tarai/libtarai.c main.c INCLUDE_DIRS tarai .)
elseif(BENCHMARK STREQUAL "template")
	idf_component_register(SRCS template/libtemplate.c main.c INCLUDE_DIRS template .)
elseif(BENCHMARK STREQUAL "trio")
	idf_component_register(SRCS trio/trio.c trio/triostr.c trio/trio_test.c main.c INCLUDE_DIRS trio .)
elseif(BENCHMARK STREQUAL "trio-snprintf")
	idf_component_register(SRCS trio-snprintf/trio.c trio-snprintf/triostr.c trio-snprintf/trio_test.c main.c INCLUDE_DIRS trio-snprintf .)
elseif(BENCHMARK STREQUAL "trio-sscanf")
	idf_component_register(SRCS trio-sscanf/trio.c trio-sscanf/triostr.c trio-sscanf/trio_test.c main.c INCLUDE_DIRS trio-sscanf .)
elseif(BENCHMARK STREQUAL "ud")
	idf_component_register(SRCS ud/libud.c main.c INCLUDE_DIRS ud .)
elseif(BENCHMARK STREQUAL "whetstone")
	idf_component_register(SRCS whetstone/libwhetstone.c main.c INCLUDE_DIRS whetstone .)
elseif(BENCHMARK STREQUAL "wikisort")
	idf_component_register(SRCS wikisort/libwikisort.c main.c INCLUDE_DIRS wikisort .)
else()
	message(FATAL_ERROR "no matching benchmark found, value was: ${BENCHMARK}")
endif()